from collections import defaultdict
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = []
    def add_edge(self, u, v, w):
        self.graph.append([u, v, w])
    def find(self, parent, i):
        if parent[i] == i:
            return i
        return self.find(parent, parent[i])
    def union(self, parent, rank, x, y):
        xroot = self.find(parent, x)
        yroot = self.find(parent, y)
        if rank[xroot] < rank[yroot]:
            parent[xroot] = yroot
        elif rank[xroot] > rank[yroot]:
            parent[yroot] = xroot
        else:
            parent[yroot] = xroot
            rank[xroot] += 1
    def kruskal_mst(self):
        result = []
        i, e = 0, 0
        self.graph = sorted(self.graph, key=lambda item: item[2])
        parent = []
        rank = []
        for node in range(self.V):
            parent.append(node)
            rank.append(0)
        while e < self.V - 1:
            u, v, w = self.graph[i]
            i += 1
            x = self.find(parent, u)
            y = self.find(parent, v)
            if x!= y:
                e += 1
                result.append([u, v, w])
                self.union(parent, rank, x, y)
        return result
    def is_unique_mst(self, mst):
        mst_weights = [edge[2] for edge in mst]
        mst_weights.sort()
        for edge in self.graph:
            if edge[2] not in mst_weights:
                new_mst = mst.copy()
                new_mst.append(edge)
                new_mst = self.kruskal_mst()
                if new_mst!= mst:
                    return False, new_mst
        return True, None
g = Graph(6)
g.add_edge(0, 1, 2)
g.add_edge(0, 2, 3)
g.add_edge(1, 2, 1)
g.add_edge(1, 3, 1)
g.add_edge(1, 4, 4)
g.add_edge(2, 5, 5)
g.add_edge(3, 4, 1)
g.add_edge(4, 5, 1)
mst = g.kruskal_mst()
print("Given MST:")
for edge in mst:
    print(f"{edge[0]} -- {edge[1]} : {edge[2]}")
is_unique, new_mst = g.is_unique_mst(mst)
if is_unique:
    print("The given MST is unique.")
else:
    print("The given MST is not unique.")
    print("Another possible MST:")
    for edge in new_mst:
        print(f"{edge[0]} -- {edge[1]} : {edge[2]}")
